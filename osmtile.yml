---
- hosts: all
  remote_user: vagrant
  sudo: yes

  vars:
    timezone: 'Europe/Paris'
    newUser: "osm"
    dbName: "osm"
    # pbfURL : "http://download.geofabrik.de/europe/france-latest.osm.pbf"
    # pbfURL : "http://download.geofabrik.de/europe/france/bretagne-latest.osm.pbf"
    pbfURL : "http://127.0.0.1/2017_02_04_rennes.pbf"
  tasks:
    ###################
    # User Management
    ###################
    - name: Create user
      user: name="{{ newUser }}"
            comment="{{ newUser }} user"
            shell=/bin/bash

    - name: Add {{ item }} to sudoers
      template: src=templates/sudoers-user.j2
                dest=/etc/sudoers.d/{{ item }}-sudoer
                validate='visudo -cf %s'
      with_items:
        - "{{ newUser }}}"

    - name: Add my public key to "{{ newUser }}"
      authorized_key: user="{{ newUser }}"
                      key="{{ lookup('file', '~/.ssh/id_rsa.pub') }}"


    - name: apt en https
      apt: name=apt-transport-https state=present

    - name :  repo pour backport
      apt_repository: repo='deb http://http.debian.net/debian jessie-backports main' state=present

    - name: apt-get update
      apt: update_cache=yes cache_valid_time=3600 # upgrade only is older than 1H

  #  - name: apt-get upgrade
  #    apt: upgrade=yes force=yes

    ###################
    # Security
    ###################
    - name: Install fail2ban
      apt: name=fail2ban state=present

    - name: Start fail2ban service
      service: name=fail2ban state=started enabled=true

   
    ###################
    # osm tile, the real work
    ###################
    - name : OSM tiles server real work
      apt: name={{ item }} state=present
      with_items:
        - curl
        - unzip
        - gdal-bin
        - mapnik-utils
        - node-carto
        - autoconf
        - libtool
        - libmapnik-dev
        - apache2-dev
        - apache2
        - postgresql-9.4-postgis-2.1
        - postgresql-contrib-9.4
        - osm2pgsql

    - name: createuser for db
      sudo: yes
      sudo_user: "postgres"
      shell: "createuser {{ newUser }} &> /dev/null" # todo remove it first ? or https://github.com/osm-fr/ansible-scripts/blob/master/roles/osm2pgsql/tasks/main.yml
      args:
        chdir: "/home/{{ newUser }}/"

    - name: createdb
      sudo: yes
      sudo_user: "postgres"
      shell: "createdb -E UTF8 -O {{ newUser }}  {{ dbName }} &> /dev/null" # todo remove it first ?
      args:
        chdir: "/home/{{ newUser }}/"

    - name: create hstore
      sudo: yes
      sudo_user: "postgres"
      shell: "psql -c \"CREATE EXTENSION hstore;\" -d {{ dbName }} &> /dev/null" # todo remove it first ?
      args:
        chdir: "/home/{{ newUser }}/"

    - name: create postgis
      sudo: yes
      sudo_user: "postgres"
      shell: "psql -c \"CREATE EXTENSION postgis;\" -d {{ dbName }} &> /dev/null" # todo remove it first ?
      args:
        chdir: "/home/{{ newUser }}/"



    - name: dl stylesheet
      sudo: yes
      sudo_user: "{{ newUser }}"
      shell: "if [ ! -e v2.29.1.tar.gz ]; then wget https://github.com/gravitystorm/openstreetmap-carto/archive/v2.29.1.tar.gz; fi"
      args:
        chdir: "/home/{{ newUser }}/"

    - name: extract stylesheet
      sudo: yes
      sudo_user: "{{ newUser }}"
      shell: "tar -xzf v2.29.1.tar.gz"
      args:
        chdir: "/home/{{ newUser }}/"

    - name: dl mod_tile
      sudo: yes
      sudo_user: "{{ newUser }}"
      shell: "if [ ! -e \"mod_tile.tar.gz\" ]; then wget https://github.com/openstreetmap/mod_tile/archive/6c2cb243e4c8b047950ab8062cd66245f20a5d2f.tar.gz -O mod_tile.tar.gz; fi"
      args:
        chdir: "/home/{{ newUser }}/"

    - name: extract mod_tile
      sudo: yes
      sudo_user: "{{ newUser }}"
      shell: "tar -xzf mod_tile.tar.gz"
      args:
        chdir: "/home/{{ newUser }}/"

    - name: dl osm data
      sudo: yes
      sudo_user: "{{ newUser }}"
      shell: "if [ ! -e \"osm_data.pbf\" ]; then wget {{ pbfURL}}  -O osm_data.pbf; fi"
      args:
        chdir: "/home/{{ newUser }}/"

    - name: import data into db using osm2pgsql
      sudo: yes
      sudo_user: "{{ newUser }}"
      shell: "osm2pgsql --slim --cache-strategy sparse -d {{ dbName }} -C 1000 --hstore -S openstreetmap-carto-2.29.1/openstreetmap-carto.style osm_data.pbf"
      args:
        chdir: "/home/{{ newUser }}/"

    - name: build mod tile
      sudo: yes
      sudo_user: "{{ newUser }}"
      shell: "./autogen.sh && ./configure && make"
      args:
        chdir: "/home/{{ newUser }}/mod_tile-6c2cb243e4c8b047950ab8062cd66245f20a5d2f/"


    - name: install mod tile
      shell: "make install && make install-mod_tile"
      args:
        chdir: "/home/{{ newUser }}/mod_tile-6c2cb243e4c8b047950ab8062cd66245f20a5d2f/"

    - name: get shapefile
      sudo: yes
      sudo_user: "{{ newUser }}"
      shell: "if [ ! -e \"data/world_boundaries-spherical.tgz\" ]; then ./get-shapefiles.sh; fi"
      args:
        chdir: "/home/{{ newUser }}/openstreetmap-carto-2.29.1/"



# change dbname
#sed -i 's/"dbname": "gis"/"dbname": "{{ dbName }}"/' project.mml

#carto project.mml > style.xml


#su

#sed -i 's/XML=\/home\/jburgess\/osm\/svn\.openstreetmap\.org\/applications\/rendering\/mapnik\/osm\-local\.xml/XML=\/home\/osm\/openstreetmap-carto-2.29.1\/style.xml/' /usr/local/etc/renderd.conf
#sed -i 's/HOST=tile\.openstreetmap\.org/HOST=localhost/' /usr/local/etc/renderd.conf

#sed -i 's/plugins_dir=\/usr\/lib\/mapnik\/input/plugins_dir=\/usr\/lib\/mapnik\/2.2\/input\//' /usr/local/etc/renderd.conf

#[mapnik]
#plugins_dir=/usr/lib/mapnik/2.2/input/
#font_dir=/usr/share/fonts/truetype
#font_dir_recurse=1

#cd /home/osm
#cp mod_tile-6c2cb243e4c8b047950ab8062cd66245f20a5d2f/debian/renderd.init /etc/init.d/renderd
#chmod a+x /etc/init.d/renderd

#sed -i 's/DAEMON=\/usr\/bin\/$NAME/DAEMON=\/usr\/local\/bin\/$NAME/' /etc/init.d/renderd
#sed -i 's/DAEMON_ARGS=""/DAEMON_ARGS=" -c \/usr\/local\/etc\/renderd.conf"/' /etc/init.d/renderd
#sed -i 's/RUNASUSER=www-data/RUNASUSER=osm/' /etc/init.d/renderd

#mkdir -p /var/lib/mod_tile
#chown osm:osm /var/lib/mod_tile


#systemctl daemon-reload
#service renderd start


#AS ROOT 
#echo "LoadModule tile_module /usr/lib/apache2/modules/mod_tile.so" > /etc/apache2/mods-available/tile.load
#ln -s /etc/apache2/mods-available/tile.load /etc/apache2/mods-enabled/

#Add the following just before <?/VirtualHost> in /etc/apache2/sites-enabled/000-default.conf To do this, you can use the nano text editor

#LoadTileConfigFile /usr/local/etc/renderd.conf
#ModTileRenderdSocketName /var/run/renderd/renderd.sock
## Timeout before giving up for a tile to be rendered
#ModTileRequestTimeout 0
## Timeout before giving up for a tile to be rendered that is otherwise missing
#ModTileMissingRequestTimeout 30



# service apache2 restart

# http://localhost/osm_tiles/0/0/0.png